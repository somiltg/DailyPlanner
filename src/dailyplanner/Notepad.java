/*

 * To change this template, choose Tools | Templates

 * and open the template in the editor.

 */



/*

 * Notepad.java

 *

 * Created on Sep 27, 2014, 8:21:49 PM

 */

package dailyplanner;



import java.awt.Color;



import java.io.BufferedOutputStream;

import java.io.FileNotFoundException;

import java.io.FileOutputStream;

import java.io.IOException;


import java.awt.image.BufferedImage;

import java.io.File;

import java.io.FileInputStream;
import java.util.StringTokenizer;

import java.util.logging.Level;

import java.util.logging.Logger;

import javax.imageio.ImageIO;

import javax.swing.Icon;

import javax.swing.ImageIcon;

import javax.swing.JColorChooser;

import javax.swing.JFileChooser;

import javax.swing.JOptionPane;

import javax.swing.text.AttributeSet;

import javax.swing.text.BadLocationException;
import javax.swing.text.Element;

import javax.swing.text.Style;

import javax.swing.text.StyleConstants;

import javax.swing.text.StyleContext;

import javax.swing.text.StyledDocument;

import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLEditorKit;



/**

 *

 * @author Dell

 */

public class Notepad extends javax.swing.JFrame {

    /** Creates new form Notepad */

    String topic, keywords[],text; //to sotre the topic, keywords and text
    Dashboard dashboard;
    Style style;//to sotre the style
    boolean change;//to see for recent changes
    int prev, curr; //to see the previous and present character counts
    Color forecolor,backcolor;//character fore and back color\
    int selNotify;//to help in determining if selected or not
    String noKeywords="Enter 5 search keywords here(Separated by comma or spaces)";
    String fileName;   

    public Notepad(String top, String keywor[],String filnm,Dashboard d) throws FileNotFoundException, IOException, BadLocationException
    {
        initComponents();
        change=false;
        text="";
        selNotify=0;
        topic=top;
        dashboard=d;
        keywords=keywor;
        fileName=filnm;
        jTopic.setText(topic);
        jNotesBox.setEditable(false);
        if(!(keywords[0].equals("")))
        jKeyword.setText(""+keywords[0]+","+keywords[1]+","+keywords[2]+","+keywords[3]+","+keywords[4]);
        else 
        jKeyword.setText(noKeywords);
        StyleContext context = new StyleContext();
        style = context.addStyle("mystyle", null);   
        jScrollPane1.setViewportView(jNotesBox); //text wrap but not for long words
        jNotesBox.setContentType("text/plain");
        //loading();
        prev=curr=jNotesBox.getDocument().getLength();      
    }

    

    /** This method is called from within the constructor to

     * initialize the form.

     * WARNING: Do NOT modify this code. The content of this method is

     * always regenerated by the Form Editor.

     */

    @SuppressWarnings("unchecked")

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AlignmentRadioGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        jResetButton = new javax.swing.JButton();
        jItalicsButton = new javax.swing.JToggleButton();
        jBoldButton = new javax.swing.JToggleButton();
        jUlineButton = new javax.swing.JToggleButton();
        jHighlightButton = new javax.swing.JButton();
        jImageButton = new javax.swing.JButton();
        jColourButton = new java.awt.Button();
        jLeftRadio = new javax.swing.JRadioButton();
        jCenterRadio = new javax.swing.JRadioButton();
        jRightRadio = new javax.swing.JRadioButton();
        jJustifiedRadio = new javax.swing.JRadioButton();
        jSizeSlider = new javax.swing.JSlider();
        jTopic = new javax.swing.JTextField();
        jKeyword = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jNotesPanel = new javax.swing.JPanel();
        jNotesBox = new javax.swing.JTextPane();
        jBackButton = new javax.swing.JButton();
        jEditButton = new javax.swing.JToggleButton();
        jLabel3 = new javax.swing.JLabel();
        jSaveButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Notes Window");
        setBackground(new java.awt.Color(-16776961,true));

        jPanel1.setBackground(new java.awt.Color(-16776961,true));

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 18));
        jLabel1.setForeground(new java.awt.Color(-1,true));
        jLabel1.setText("TOPIC : ");
        jLabel1.setFocusable(false);
        jLabel1.setRequestFocusEnabled(false);

        jToolBar1.setBackground(new java.awt.Color(-16776961,true));
        jToolBar1.setRollover(true);
        jToolBar1.setAutoscrolls(true);
        jToolBar1.setFocusable(false);

        jResetButton.setBackground(new java.awt.Color(-14336,true));
        jResetButton.setFont(new java.awt.Font("Dialog", 0, 14));
        jResetButton.setText("  Reset  ");
        jResetButton.setBorder(new javax.swing.border.SoftBevelBorder(0));
        jResetButton.setFocusable(false);
        jResetButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jResetButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jResetButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(jResetButton);

        jItalicsButton.setBackground(new java.awt.Color(-14336,true));
        jItalicsButton.setFont(new java.awt.Font("Dialog", 2, 14));
        jItalicsButton.setText("  Italics  ");
        jItalicsButton.setBorder(new javax.swing.border.SoftBevelBorder(0));
        jItalicsButton.setFocusable(false);
        jItalicsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jItalicsButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jItalicsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jItalicsButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(jItalicsButton);

        jBoldButton.setBackground(new java.awt.Color(-14336,true));
        jBoldButton.setFont(new java.awt.Font("Dialog", 1, 14));
        jBoldButton.setText("  Bold  ");
        jBoldButton.setBorder(new javax.swing.border.SoftBevelBorder(0));
        jBoldButton.setFocusable(false);
        jBoldButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBoldButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBoldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBoldButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(jBoldButton);

        jUlineButton.setBackground(new java.awt.Color(-14336,true));
        jUlineButton.setFont(new java.awt.Font("Dialog", 1, 14));
        jUlineButton.setText("  Uline  ");
        jUlineButton.setBorder(new javax.swing.border.SoftBevelBorder(0));
        jUlineButton.setFocusable(false);
        jUlineButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jUlineButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jUlineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUlineButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(jUlineButton);

        jHighlightButton.setBackground(new java.awt.Color(-14336,true));
        jHighlightButton.setFont(new java.awt.Font("Dialog", 1, 14));
        jHighlightButton.setForeground(new java.awt.Color(-1,true));
        jHighlightButton.setText("  Highlight  ");
        jHighlightButton.setBorder(new javax.swing.border.SoftBevelBorder(0));
        jHighlightButton.setFocusable(false);
        jHighlightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jHighlightButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(jHighlightButton);

        jImageButton.setBackground(new java.awt.Color(-14336,true));
        jImageButton.setFont(new java.awt.Font("Dialog", 0, 14));
        jImageButton.setText("  Images  ");
        jImageButton.setBorder(new javax.swing.border.SoftBevelBorder(0));
        jImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jImageButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(jImageButton);

        jColourButton.setBackground(new java.awt.Color(-14336,true));
        jColourButton.setFocusable(false);
        jColourButton.setFont(new java.awt.Font("Dialog", 1, 14));
        jColourButton.setLabel("Colour  ");
        jColourButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jColourButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(jColourButton);

        jLeftRadio.setBackground(new java.awt.Color(-16776961,true));
        AlignmentRadioGroup.add(jLeftRadio);
        jLeftRadio.setFont(new java.awt.Font("Dialog", 1, 14));
        jLeftRadio.setForeground(new java.awt.Color(-1,true));
        jLeftRadio.setSelected(true);
        jLeftRadio.setText("Left  ");
        jLeftRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLeftRadioActionPerformed(evt);
            }
        });
        jToolBar1.add(jLeftRadio);

        jCenterRadio.setBackground(new java.awt.Color(-16776961,true));
        AlignmentRadioGroup.add(jCenterRadio);
        jCenterRadio.setFont(new java.awt.Font("Dialog", 1, 14));
        jCenterRadio.setForeground(new java.awt.Color(-1,true));
        jCenterRadio.setText("Center  ");
        jCenterRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCenterRadioActionPerformed(evt);
            }
        });
        jToolBar1.add(jCenterRadio);

        jRightRadio.setBackground(new java.awt.Color(-16776961,true));
        AlignmentRadioGroup.add(jRightRadio);
        jRightRadio.setFont(new java.awt.Font("Dialog", 1, 14));
        jRightRadio.setForeground(new java.awt.Color(-1,true));
        jRightRadio.setText("Right  ");
        jRightRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRightRadioActionPerformed(evt);
            }
        });
        jToolBar1.add(jRightRadio);

        jJustifiedRadio.setBackground(new java.awt.Color(-16776961,true));
        AlignmentRadioGroup.add(jJustifiedRadio);
        jJustifiedRadio.setFont(new java.awt.Font("Dialog", 1, 14));
        jJustifiedRadio.setForeground(new java.awt.Color(-1,true));
        jJustifiedRadio.setText("Justified");
        jJustifiedRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jJustifiedRadioActionPerformed(evt);
            }
        });
        jToolBar1.add(jJustifiedRadio);

        jSizeSlider.setBackground(new java.awt.Color(-16776961,true));
        jSizeSlider.setFont(new java.awt.Font("Dialog", 0, 14));
        jSizeSlider.setForeground(new java.awt.Color(-14336,true));
        jSizeSlider.setMajorTickSpacing(1);
        jSizeSlider.setMaximum(72);
        jSizeSlider.setMinimum(8);
        jSizeSlider.setMinorTickSpacing(1);
        jSizeSlider.setPaintTicks(true);
        jSizeSlider.setSnapToTicks(true);
        jSizeSlider.setToolTipText("Font Size");
        jSizeSlider.setValue(20);
        jSizeSlider.setFocusable(false);
        jSizeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSizeSliderStateChanged(evt);
            }
        });
        jToolBar1.add(jSizeSlider);

        jTopic.setBorder(javax.swing.BorderFactory.createBevelBorder(0));
        jTopic.setFocusable(false);

        jKeyword.setFont(new java.awt.Font("Dialog", 2, 12));
        jKeyword.setText("Enter five search keywords separated by commas");
        jKeyword.setToolTipText("");
        jKeyword.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jKeywordFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jKeywordFocusLost(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 18));
        jLabel2.setForeground(new java.awt.Color(-1,true));
        jLabel2.setText("KEYWORDS : ");
        jLabel2.setFocusable(false);
        jLabel2.setRequestFocusEnabled(false);

        jScrollPane1.setBackground(new java.awt.Color(-14336,true));
        jScrollPane1.setViewportBorder(new javax.swing.border.SoftBevelBorder(0));

        jNotesPanel.setBackground(new java.awt.Color(-14336,true));
        jNotesPanel.setBorder(new javax.swing.border.SoftBevelBorder(0));

        jNotesBox.setBorder(javax.swing.BorderFactory.createBevelBorder(0));
        jNotesBox.setEditable(false);
        jNotesBox.setFont(new java.awt.Font("SansSerif", 0, 14));
        jNotesBox.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jNotesBoxCaretUpdate(evt);
            }
        });
        jNotesBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jNotesBoxMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jNotesBoxMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jNotesBoxMouseReleased(evt);
            }
        });
        jNotesBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jNotesBoxKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jNotesBoxKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jNotesPanelLayout = new javax.swing.GroupLayout(jNotesPanel);
        jNotesPanel.setLayout(jNotesPanelLayout);
        jNotesPanelLayout.setHorizontalGroup(
            jNotesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jNotesPanelLayout.createSequentialGroup()
                .addComponent(jNotesBox, javax.swing.GroupLayout.PREFERRED_SIZE, 972, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jNotesPanelLayout.setVerticalGroup(
            jNotesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jNotesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jNotesBox, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jNotesPanel);

        jBackButton.setBackground(new java.awt.Color(-14336,true));
        jBackButton.setFont(new java.awt.Font("Dialog", 0, 14));
        jBackButton.setText("< Back to Dashboard");
        jBackButton.setBorder(new javax.swing.border.SoftBevelBorder(0));
        jBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBackButtonActionPerformed(evt);
            }
        });

        jEditButton.setBackground(new java.awt.Color(-14336,true));
        jEditButton.setFont(new java.awt.Font("Dialog", 1, 14));
        jEditButton.setText(" Edit Note ");
        jEditButton.setBorder(new javax.swing.border.SoftBevelBorder(0));
        jEditButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jEditButton.setOpaque(true);
        jEditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jEditButtonActionPerformed(evt);
            }
        });

        jLabel3.setBackground(new java.awt.Color(-1,true));
        jLabel3.setFocusable(false);
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jSaveButton.setBackground(new java.awt.Color(-14336,true));
        jSaveButton.setFont(new java.awt.Font("Dialog", 0, 14));
        jSaveButton.setText("Save");
        jSaveButton.setBorder(new javax.swing.border.SoftBevelBorder(0));
        jSaveButton.setFocusable(false);
        jSaveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jSaveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSaveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTopic, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(39, 39, 39)
                                        .addComponent(jSaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(42, 42, 42)
                                        .addComponent(jEditButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(57, 57, 57)
                                        .addComponent(jLabel2))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(46, 46, 46)
                                        .addComponent(jKeyword, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 980, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 921, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel2))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jTopic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBackButton)
                    .addComponent(jEditButton)
                    .addComponent(jKeyword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1015, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void loading() throws FileNotFoundException, IOException, BadLocationException
{
     Element ele = null,pele=null;
    Icon icon;
    HTMLEditorKit kit= new HTMLEditorKit();
    
 HTMLDocument doc = (HTMLDocument) kit.createDefaultDocument();
 kit.read(new FileInputStream(fileName), doc, 0);
 jNotesBox.setText(null);
 StyledDocument stdoc= jNotesBox.getStyledDocument();
 int n=doc.getLength();
 for(int i=0;i<n;i++)
 {
     ele=doc.getCharacterElement(i);
         pele=doc.getParagraphElement(i);
      AttributeSet as= (AttributeSet) ele.getAttributes();
      AttributeSet pas= (AttributeSet) pele.getAttributes();
 icon = StyleConstants.getIcon(as);
if(icon==null)
{   
 // if(i!=0 && !(doc.getCharacterElement(i-1).getAttributes().equals(as)) doc.getText(i,1)|| i==n-1) continue;
           style.addAttribute(StyleConstants.FontSize, StyleConstants.getFontSize(as));
        style.addAttribute(StyleConstants.Bold, StyleConstants.isBold(as));
        style.addAttribute(StyleConstants.Italic, StyleConstants.isItalic(as));
        style.addAttribute(StyleConstants.Underline, StyleConstants.isUnderline(as));
        style.addAttribute(StyleConstants.Foreground, StyleConstants.getForeground(as));
         style.addAttribute(StyleConstants.Background,Color.WHITE);
          //style.addAttribute(StyleConstants.FontFamily,Font.COURIER);
         style.addAttribute(StyleConstants.Alignment, StyleConstants.getAlignment(pas));
         stdoc.insertString(stdoc.getLength(),doc.getText(i,1),style);
         stdoc.setParagraphAttributes(stdoc.getLength(),1, style,false);
}
else
{
     StyleConstants.setIcon(style, icon);
stdoc.insertString(stdoc.getLength(), "ignored text", style);
}
 }
 
}

    void setAttri()

    {

      

       style.addAttribute(StyleConstants.FontSize, jSizeSlider.getValue());

        style.addAttribute(StyleConstants.Bold, jBoldButton.isSelected());

        style.addAttribute(StyleConstants.Italic, jItalicsButton.isSelected());

        style.addAttribute(StyleConstants.Underline, jUlineButton.isSelected());

        style.addAttribute(StyleConstants.Foreground, jColourButton.getForeground());

        style.addAttribute(StyleConstants.Background, jHighlightButton.getForeground());

        style.addAttribute(StyleConstants.Alignment, AlignmentToButtonSync());

        //style.addAttribute(StyleConstants.FontFamily, Font.TIMES_ROMAN);
         jNotesBox.setCharacterAttributes(style,true); 

          jNotesBox.setParagraphAttributes(style, true);

    }

  

    void setButtons()

    {

    // AttributeSet as=jNotesBox.getCharacterAttributes();

    // AttributeSet pas=jNotesBox.getParagraphAttributes();
    StyledDocument doc= jNotesBox.getStyledDocument();
     Element ele=doc.getCharacterElement(jNotesBox.getCaretPosition()-1);
         Element pele=doc.getParagraphElement(jNotesBox.getCaretPosition()-1);
      AttributeSet as= (AttributeSet) ele.getAttributes();
      AttributeSet pas= (AttributeSet) pele.getAttributes();
jBoldButton.setSelected(StyleConstants.isBold(as));

jItalicsButton.setSelected(StyleConstants.isItalic(as));

 jUlineButton.setSelected(StyleConstants.isUnderline(as));

 jSizeSlider.setValue(StyleConstants.getFontSize(as));

 jColourButton.setForeground(StyleConstants.getForeground(as));

 jHighlightButton.setForeground(StyleConstants.getBackground(as));

 switch(StyleConstants.getAlignment(pas))

 {

     case StyleConstants.ALIGN_CENTER: jCenterRadio.setSelected(true); break;

     case StyleConstants.ALIGN_RIGHT: jRightRadio.setSelected(true); break;

     case StyleConstants.ALIGN_JUSTIFIED: jJustifiedRadio.setSelected(true); break;

     default:   jLeftRadio.setSelected(true);

 }

    }

    void setUnFormat()

    {

       jBoldButton.setSelected(false);

jItalicsButton.setSelected(false);

jUlineButton.setSelected(false);

jColourButton.setForeground(Color.BLACK);

jHighlightButton.setForeground(Color.WHITE); 

jLeftRadio.setSelected(true);

    }

    

    int AlignmentToButtonSync()

    {

        if(jCenterRadio.isSelected()) return StyleConstants.ALIGN_CENTER;

        else if(jRightRadio.isSelected()) return StyleConstants.ALIGN_RIGHT;

        else if(jJustifiedRadio.isSelected()) return StyleConstants.ALIGN_JUSTIFIED;

        else return StyleConstants.ALIGN_LEFT;

    }

    

private void jResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jResetButtonActionPerformed



    String option[]={"Reset Formatting Attributes.","Reset Text and Keywords","Reset Both"};

  int choice=JOptionPane.showOptionDialog(null, "What do you wish to reset?", "Reset Dialog..", JOptionPane.DEFAULT_OPTION,JOptionPane.QUESTION_MESSAGE, null,option,option[2] );

 if(choice==0 || choice==2)

 {

  setUnFormat();   

setAttri();

 }  

 if(choice==1 || choice==2)

 { jNotesBox.setText(""); change=true;

 for(int i=0;i<5;i++)

 keywords[i]="";

 jKeyword.setText(noKeywords);

 }

}//GEN-LAST:event_jResetButtonActionPerformed



private void jBoldButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBoldButtonActionPerformed



if(selNotify==0)setAttri();

setFormat('b');

}//GEN-LAST:event_jBoldButtonActionPerformed



private void jItalicsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jItalicsButtonActionPerformed

 

   if(selNotify==0)setAttri(); 

  setFormat('i');

   

}//GEN-LAST:event_jItalicsButtonActionPerformed



private void jUlineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUlineButtonActionPerformed



if(selNotify==0)setAttri(); 

setFormat('u');

 

    

}//GEN-LAST:event_jUlineButtonActionPerformed





private void jKeywordFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jKeywordFocusGained

    if((jKeyword.getText().equals(noKeywords)))
        jKeyword.setText("");
    else 
        jKeyword.selectAll();
}//GEN-LAST:event_jKeywordFocusGained



private void jKeywordFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jKeywordFocusLost

    if(jKeyword.getText().equals("")){

        if(!(keywords[0].equals("")))
            jKeyword.setText(""+keywords[0]+","+keywords[1]+","+keywords[2]+","+keywords[3]+","+keywords[4]);
        else 
            jKeyword.setText(noKeywords); 
        return;
    }
    makeKeywords();
}//GEN-LAST:event_jKeywordFocusLost

public void makeKeywords(){
    StringTokenizer it=new StringTokenizer(jKeyword.getText(),", ");
    int k=it.countTokens();
    if(k!=5){
        JOptionPane.showMessageDialog(null, "The Keywords entered should be 5 in number.");
        jKeyword.requestFocus();
    }
    else{
        for(int i=0;i<k;i++)
            keywords[i]=it.nextToken(", ");
    }
}




private void jSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSaveButtonActionPerformed
        try {
            save();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Notepad.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Notepad.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadLocationException ex) {
            Logger.getLogger(Notepad.class.getName()).log(Level.SEVERE, null, ex);
        }

}//GEN-LAST:event_jSaveButtonActionPerformed

private void jBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBackButtonActionPerformed

    dashboard.saveKeywords(keywords,topic);
    if(!change) 
        this.setVisible(false);
    else{
        int showConfirm = JOptionPane.showConfirmDialog(null, "There are unsaved changes in the Pad.\nWish to save before exiting?");
        if(showConfirm==0){
            try {
                try {
                    save();
                } catch (BadLocationException ex) {
                    Logger.getLogger(Notepad.class.getName()).log(Level.SEVERE, null, ex);
                }
                this.setVisible(false);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Notepad.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Notepad.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if(showConfirm==1) {
            this.setVisible(false);
        }
    }
}//GEN-LAST:event_jBackButtonActionPerformed



private void jNotesBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jNotesBoxKeyPressed

selNotify=0; 

prev=curr; curr=jNotesBox.getDocument().getLength();   

if(prev!=curr)change=true;

}//GEN-LAST:event_jNotesBoxKeyPressed



private void jSizeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSizeSliderStateChanged



 if(selNotify==0)

     setAttri();    

setFormat('s');  

   

}//GEN-LAST:event_jSizeSliderStateChanged



private void jNotesBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jNotesBoxMouseClicked

selNotify=0;

//if(jNotesBox.getCaretPosition()!=jNotesBox.getDocument().getLength())

setButtons();

}//GEN-LAST:event_jNotesBoxMouseClicked



private void jNotesBoxKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jNotesBoxKeyTyped

selNotify=0;

prev=curr; curr=jNotesBox.getDocument().getLength();

if(curr!=prev) change=true;

    if(jNotesBox.getCaretPosition()==jNotesBox.getDocument().getLength())

     setAttri();

}//GEN-LAST:event_jNotesBoxKeyTyped



private void jNotesBoxCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jNotesBoxCaretUpdate


//&& jNotesBox.getCaretPosition()!=jNotesBox.getDocument().getLength()
    if(selNotify==0 && prev==curr )
        setButtons();

}//GEN-LAST:event_jNotesBoxCaretUpdate



private void jEditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jEditButtonActionPerformed

if(jEditButton.isSelected())

{jNotesBox.setEditable(true);jNotesBox.getCaret().setVisible(true);
}

else

{

jNotesBox.setEditable(false);jNotesBox.getCaret().setVisible(false);

}

}//GEN-LAST:event_jEditButtonActionPerformed



private void jColourButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jColourButtonActionPerformed



    Color forecolor1 = null;

    forecolor1=JColorChooser.showDialog(null, "Choose a color>>", forecolor);

    if(forecolor1==null)return; else forecolor=forecolor1;

jColourButton.setForeground(forecolor);

text=jNotesBox.getSelectedText();

if(selNotify==0)setAttri();

setFormat('f');

}//GEN-LAST:event_jColourButtonActionPerformed



private void jHighlightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jHighlightButtonActionPerformed

Color backcolor1 = null;

   backcolor1= JColorChooser.showDialog(null, "Choose a Highlight Color>>", backcolor);

    if(backcolor1==null)return; else backcolor=backcolor1;

jHighlightButton.setForeground(backcolor);

text=jNotesBox.getSelectedText();

if(selNotify==0)setAttri();

setFormat('h');



}//GEN-LAST:event_jHighlightButtonActionPerformed



private void jNotesBoxMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jNotesBoxMouseReleased

text=jNotesBox.getSelectedText();

jNotesBox.getCaret().setVisible(true);



    

}//GEN-LAST:event_jNotesBoxMouseReleased



private void jNotesBoxMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jNotesBoxMousePressed

selNotify=1;

jNotesBox.getCaret().setVisible(false);

}//GEN-LAST:event_jNotesBoxMousePressed



private void jLeftRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLeftRadioActionPerformed

if(selNotify==0)setAttri(); 

  setFormat('l');

}//GEN-LAST:event_jLeftRadioActionPerformed



private void jCenterRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCenterRadioActionPerformed

if(selNotify==0)setAttri(); 

  setFormat('c');

}//GEN-LAST:event_jCenterRadioActionPerformed



private void jRightRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRightRadioActionPerformed

if(selNotify==0)setAttri(); 

  setFormat('r');

}//GEN-LAST:event_jRightRadioActionPerformed



private void jJustifiedRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jJustifiedRadioActionPerformed

if(selNotify==0)setAttri(); 

  setFormat('j');

}//GEN-LAST:event_jJustifiedRadioActionPerformed



private void jImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jImageButtonActionPerformed

JFileChooser fileChooser = new JFileChooser();

        int option = fileChooser.showOpenDialog(null);

        File file = fileChooser.getSelectedFile();

        if (option == JFileChooser.APPROVE_OPTION) {



            try {



                BufferedImage image = ImageIO.read(file);

                //image = Scalr.resize(image, 200);

                StyledDocument document = (StyledDocument) jNotesBox.getDocument();

                Style style1 = document.addStyle("StyleName", null);

                StyleConstants.setIcon(style1, new ImageIcon(image));

                document.insertString(jNotesBox.getCaretPosition(), "ignored text", style1);

               change=true;



            }



            catch (Exception e) { JOptionPane.showMessageDialog(null, "Error in loading the picture\n");
            }



        }



        if (option == JFileChooser.CANCEL_OPTION) {



            fileChooser.setVisible(false);



        }



}//GEN-LAST:event_jImageButtonActionPerformed



private void save() throws FileNotFoundException, IOException, BadLocationException 

{

    if(change){saveProcess();
        JOptionPane.showMessageDialog(null, "Saved Successfully!");

change=false;}

    else JOptionPane.showMessageDialog(null,"No recent changes made.");
}

private void saveProcess() throws FileNotFoundException, IOException, BadLocationException
{
    Element ele,pele;
  StyledDocument doc=jNotesBox.getStyledDocument();
               HTMLEditorKit kit=new HTMLEditorKit();
            //jNotesBox.setEditorKit(kit);
                try {
                BufferedOutputStream  out = new BufferedOutputStream(new FileOutputStream(fileName));
                  kit.write(out,doc ,0, doc.getLength());
                     //writer.write();
                } catch (FileNotFoundException e) {
                    JOptionPane.showMessageDialog(null, "File not Found.... Some Serious Error...");

                } catch (IOException e){
                    JOptionPane.showMessageDialog(null, "Input Error.....");
}
}



private void setFormat(char choice)

{// to start the formatting process, invoking various objects    

    
System.out.println(text);
   if(text==null)return;

    Element ele = null,pele=null;

    int fontSize,alignment;

    boolean isBold = false, isItalic, isUnderlined;

    Color bcolour,colour; 

    Icon icon;

       

    StyledDocument doc=(StyledDocument) jNotesBox.getStyledDocument();

   text=jNotesBox.getSelectedText();

   int selStart=jNotesBox.getSelectionStart();

       int   selEnd=jNotesBox.getSelectionEnd(); 

       

 

   for(int i=selStart;i<selEnd;i++)

   {

         ele=doc.getCharacterElement(i);

         pele=doc.getParagraphElement(i);

      AttributeSet as= (AttributeSet) ele.getAttributes();

      AttributeSet pas= (AttributeSet) pele.getAttributes();

        fontSize = StyleConstants.getFontSize(as);

            icon = StyleConstants.getIcon(as);

           if(icon!=null)continue;

        isBold=StyleConstants.isBold(as);

        isItalic=StyleConstants.isItalic(as);

        isUnderlined=StyleConstants.isUnderline(as);

        colour=StyleConstants.getForeground(as);

            bcolour = StyleConstants.getBackground(as);

           alignment = StyleConstants.getAlignment(pas);

            switch(choice)

        {

            case 'b' :isBold=jBoldButton.isSelected();  break;

            case 'i' :isItalic=jItalicsButton.isSelected();  break;

            case 'u': isUnderlined=jUlineButton.isSelected(); break;

            case 's': fontSize=jSizeSlider.getValue();break;

            case 'f': colour=forecolor;break; 

            case 'h': bcolour=backcolor;break;

            case 'c': alignment=StyleConstants.ALIGN_CENTER; break;

            case 'l':alignment=StyleConstants.ALIGN_LEFT; break;

            case 'r':alignment=StyleConstants.ALIGN_RIGHT;break;

            case 'j':alignment=StyleConstants.ALIGN_JUSTIFIED; break;

        }

        

            style.addAttribute(StyleConstants.FontSize, fontSize);

        style.addAttribute(StyleConstants.Bold, isBold);

        style.addAttribute(StyleConstants.Italic, isItalic);

        style.addAttribute(StyleConstants.Underline, isUnderlined);

        style.addAttribute(StyleConstants.Foreground, colour);
       /* if(choice=='h')
        {
 String htmlStyle = "background-color:" + getHTMLColor(bcolour);
        SimpleAttributeSet attr = new SimpleAttributeSet();
        attr.addAttribute(HTML.Attribute.STYLE, htmlStyle);
        MutableAttributeSet outerAttr = new SimpleAttributeSet();
        outerAttr.addAttribute(HTML.Tag.SPAN, attr);
        StyleConstants.setBackground(outerAttr, bcolour);
        jNotesBox.setCharacterAttributes(outerAttr, false);
        }*/
         style.addAttribute(StyleConstants.Background, bcolour);

         style.addAttribute(StyleConstants.Alignment, alignment);

         jNotesBox.getStyledDocument().setCharacterAttributes(i,1, style,false);

         jNotesBox.getStyledDocument().setParagraphAttributes(i,1, style,false);

}

 

   jNotesBox.select(selStart, selEnd);

   text=jNotesBox.getSelectedText();

   change=true; 

}

public static String getHTMLColor(Color color) {
    if (color == null) {
        return "#000000";
    }
    return "#" + Integer.toHexString(color.getRGB()).substring(2).toUpperCase();
}

    /**

     * @param args the command line arguments

     */

    public static void main(String args[]) {

        

       

        //</editor-fold>



        /* Create and display the form */

        java.awt.EventQueue.invokeLater(new Runnable() {



            @Override

            public void run() {

               

            }

        });

    }

    

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup AlignmentRadioGroup;
    private javax.swing.JButton jBackButton;
    private javax.swing.JToggleButton jBoldButton;
    private javax.swing.JRadioButton jCenterRadio;
    private java.awt.Button jColourButton;
    private javax.swing.JToggleButton jEditButton;
    private javax.swing.JButton jHighlightButton;
    private javax.swing.JButton jImageButton;
    private javax.swing.JToggleButton jItalicsButton;
    private javax.swing.JRadioButton jJustifiedRadio;
    private javax.swing.JTextField jKeyword;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JRadioButton jLeftRadio;
    private javax.swing.JTextPane jNotesBox;
    private javax.swing.JPanel jNotesPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jResetButton;
    private javax.swing.JRadioButton jRightRadio;
    private javax.swing.JButton jSaveButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSizeSlider;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTextField jTopic;
    private javax.swing.JToggleButton jUlineButton;
    // End of variables declaration//GEN-END:variables

}

